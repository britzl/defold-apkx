local store_missing_resources
local xapk_files_delivered
local launch_downloader
local start_game

function init(self)
	if not apkx then
		label.set_text("#status", "Run this example on Android")
		return
	end

	if not xapk_files_delivered() then
		launch_downloader()
	else
		store_resources_and_start()
	end
end

local xapk_files_expected = {
	{ is_main = true, version = 1 }
}

function xapk_files_delivered()
	for _, file in ipairs(xapk_files_expected) do
		local file_path = apkx.get_expansion_apk_file_path(file.is_main, file.version)

		-- Check if file exists
		local f = io.open(file_path, "r")
		if not f then return false end
		f:close()
	end
	return true
end

function launch_downloader()
	apkx.configure_download_service({
		-- Get this from Google Play Console -> Your app -> Services & APIs
		public_key = "YOUR BASE64-ENCODED PUBLIC KEY HERE",
		-- Change this to a random 20-byte value unique to your app
		salt = "\53\11\9\97\83\72\44\89\17\1\69\14\59\52\84\13\45\36\20\5",
		on_download_state_change = function (state)
			if state == apkx.STATE_COMPLETED then
				-- Download finished. Start game
				store_resources_and_start()
			else
				label.set_text("#status", apkx.get_downloader_string_from_state(state))
			end
		end,
		on_download_progress = function (progress)
			local current_speed = progress.current_speed * 1000 / 1024
			local time_remaining = progress.time_remaining / 1000
			local fraction = math.floor(progress.overall_progress * 100 / progress.overall_total)
			label.set_text("#progress", tostring(fraction) .. "% (" .. current_speed .. " kB/s) ETA " .. time_remaining .. "s")
		end,
	})

	if not apkx.start_download_service_if_required() then
		-- Download not required. Start game directly
		store_resources_and_start()
	end
end

function store_resources_and_start()
	local missing_resources = collectionproxy.missing_resources("#proxy")

	if #missing_resources == 0 then
		start_game()
		return
	end

	pprint(missing_resources)
	-- TODO: parse the ZIP file and store all these resources
end

function start_game()
	label.set_text("#status", "")
	label.set_text("#progress", "")

	msg.post("#proxy", "load")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("proxy_loaded") then
	end
end